# PIPELINE DEFINITION
# Name: inference-pipeline
# Description: Пайплайн для инференса модели машинного обучения
components:
  comp-load-inference-data:
    executorLabel: exec-load-inference-data
    outputDefinitions:
      artifacts:
        data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-load-model:
    executorLabel: exec-load-model
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-run-inference:
    executorLabel: exec-run-inference
    inputDefinitions:
      artifacts:
        data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        model:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        predictions:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-save-results:
    executorLabel: exec-save-results
    inputDefinitions:
      artifacts:
        predictions:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        summary:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-load-inference-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_inference_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_inference_data(data: Output[Dataset]):\n    \"\"\"\u041A\
          \u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442 \u0434\u043B\u044F \u0437\
          \u0430\u0433\u0440\u0443\u0437\u043A\u0438 \u0434\u0430\u043D\u043D\u044B\
          \u0445 \u0434\u043B\u044F \u0438\u043D\u0444\u0435\u0440\u0435\u043D\u0441\
          \u0430\"\"\"\n    import pandas as pd\n    import numpy as np\n\n    # \u0413\
          \u0435\u043D\u0435\u0440\u0430\u0446\u0438\u044F \u0441\u0438\u043D\u0442\
          \u0435\u0442\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0434\u0430\u043D\
          \u043D\u044B\u0445\n    n_samples = 100\n    n_features = 10\n    X = np.random.rand(n_samples,\
          \ n_features)\n\n    # \u0421\u043E\u0437\u0434\u0430\u043D\u0438\u0435\
          \ DataFrame\n    df = pd.DataFrame(X, columns=[f'feature_{i}' for i in range(n_features)])\n\
          \n    # \u0421\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u0435 \u0434\
          \u0430\u043D\u043D\u044B\u0445\n    df.to_csv(data.path, index=False)\n\n\
          \    print(f\"\u0414\u0430\u043D\u043D\u044B\u0435 \u0434\u043B\u044F \u0438\
          \u043D\u0444\u0435\u0440\u0435\u043D\u0441\u0430 \u0441\u043E\u0445\u0440\
          \u0430\u043D\u0435\u043D\u044B \u0432 {data.path}\")\n\n"
        image: python:3.9
    exec-load-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_model(model: Output[Artifact]):\n    \"\"\"\u041A\u043E\u043C\
          \u043F\u043E\u043D\u0435\u043D\u0442 \u0434\u043B\u044F \u0437\u0430\u0433\
          \u0440\u0443\u0437\u043A\u0438 \u043E\u0431\u0443\u0447\u0435\u043D\u043D\
          \u043E\u0439 \u043C\u043E\u0434\u0435\u043B\u0438\"\"\"\n    import os\n\
          \    import pickle\n    import numpy as np\n    from sklearn.ensemble import\
          \ RandomForestClassifier\n\n    # \u0421\u043E\u0437\u0434\u0430\u043D\u0438\
          \u0435 \u043D\u043E\u0432\u043E\u0439 \u043C\u043E\u0434\u0435\u043B\u0438\
          \n    print(f\"\u0421\u043E\u0437\u0434\u0430\u043D\u0438\u0435 \u043D\u043E\
          \u0432\u043E\u0439 \u043C\u043E\u0434\u0435\u043B\u0438...\")\n\n    # \u0413\
          \u0435\u043D\u0435\u0440\u0430\u0446\u0438\u044F \u0441\u0438\u043D\u0442\
          \u0435\u0442\u0438\u0447\u0435\u0441\u043A\u0438\u0445 \u0434\u0430\u043D\
          \u043D\u044B\u0445 \u0434\u043B\u044F \u043E\u0431\u0443\u0447\u0435\u043D\
          \u0438\u044F \u043F\u0440\u043E\u0441\u0442\u043E\u0439 \u043C\u043E\u0434\
          \u0435\u043B\u0438\n    X = np.random.rand(1000, 10)\n    y = np.random.randint(0,\
          \ 2, 1000)\n\n    # \u041E\u0431\u0443\u0447\u0435\u043D\u0438\u0435 \u043F\
          \u0440\u043E\u0441\u0442\u043E\u0439 \u043C\u043E\u0434\u0435\u043B\u0438\
          \n    model_obj = RandomForestClassifier(n_estimators=10, random_state=42)\n\
          \    model_obj.fit(X, y)\n\n    # \u0421\u043E\u0445\u0440\u0430\u043D\u0435\
          \u043D\u0438\u0435 \u043C\u043E\u0434\u0435\u043B\u0438\n    with open(model.path,\
          \ 'wb') as f:\n        pickle.dump(model_obj, f)\n\n    print(f\"\u041D\u043E\
          \u0432\u0430\u044F \u043C\u043E\u0434\u0435\u043B\u044C \u0441\u043E\u0437\
          \u0434\u0430\u043D\u0430 \u0438 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\
          \u043D\u0430 \u0432 {model.path}\")\n\n"
        image: python:3.9
    exec-run-inference:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - run_inference
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef run_inference(\n        data: Input[Dataset],\n        model:\
          \ Input[Artifact],\n        predictions: Output[Dataset]\n):\n    \"\"\"\
          \u041A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442 \u0434\u043B\u044F\
          \ \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F \u0438\u043D\
          \u0444\u0435\u0440\u0435\u043D\u0441\u0430\"\"\"\n    import pandas as pd\n\
          \    import pickle\n\n    # \u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430\
          \ \u0434\u0430\u043D\u043D\u044B\u0445\n    df = pd.read_csv(data.path)\n\
          \n    # \u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u043C\u043E\u0434\
          \u0435\u043B\u0438\n    with open(model.path, 'rb') as f:\n        model_obj\
          \ = pickle.load(f)\n\n    # \u0412\u044B\u043F\u043E\u043B\u043D\u0435\u043D\
          \u0438\u0435 \u043F\u0440\u0435\u0434\u0441\u043A\u0430\u0437\u0430\u043D\
          \u0438\u0439\n    pred = model_obj.predict(df)\n\n    # \u0414\u043E\u0431\
          \u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u043F\u0440\u0435\u0434\u0441\
          \u043A\u0430\u0437\u0430\u043D\u0438\u0439 \u0432 DataFrame\n    result_df\
          \ = df.copy()\n    result_df['prediction'] = pred\n\n    # \u0421\u043E\u0445\
          \u0440\u0430\u043D\u0435\u043D\u0438\u0435 \u0440\u0435\u0437\u0443\u043B\
          \u044C\u0442\u0430\u0442\u043E\u0432\n    result_df.to_csv(predictions.path,\
          \ index=False)\n\n    print(f\"\u0420\u0435\u0437\u0443\u043B\u044C\u0442\
          \u0430\u0442\u044B \u0438\u043D\u0444\u0435\u0440\u0435\u043D\u0441\u0430\
          \ \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u044B \u0432 {predictions.path}\"\
          )\n\n"
        image: python:3.9
    exec-save-results:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - save_results
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef save_results(\n        predictions: Input[Dataset],\n       \
          \ summary: Output[Artifact]\n):\n    \"\"\"\u041A\u043E\u043C\u043F\u043E\
          \u043D\u0435\u043D\u0442 \u0434\u043B\u044F \u0430\u043D\u0430\u043B\u0438\
          \u0437\u0430 \u0438 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\
          \u044F \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u043E\u0432\
          \ \u0438\u043D\u0444\u0435\u0440\u0435\u043D\u0441\u0430\"\"\"\n    import\
          \ pandas as pd\n    import json\n    from datetime import datetime\n\n \
          \   # \u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0440\u0435\u0437\
          \u0443\u043B\u044C\u0442\u0430\u0442\u043E\u0432 \u043F\u0440\u0435\u0434\
          \u0441\u043A\u0430\u0437\u0430\u043D\u0438\u0439\n    df = pd.read_csv(predictions.path)\n\
          \n    # \u0410\u043D\u0430\u043B\u0438\u0437 \u0440\u0435\u0437\u0443\u043B\
          \u044C\u0442\u0430\u0442\u043E\u0432\n    n_samples = len(df)\n\n    # \u041F\
          \u043E\u0434\u0441\u0447\u0435\u0442 \u043A\u043E\u043B\u0438\u0447\u0435\
          \u0441\u0442\u0432\u0430 \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u043A\
          \u043B\u0430\u0441\u0441\u0430 \u043F\u0440\u0435\u0434\u0441\u043A\u0430\
          \u0437\u0430\u043D\u0438\u0439\n    if 'prediction' in df.columns:\n   \
          \     prediction_counts = df['prediction'].value_counts().to_dict()\n  \
          \  else:\n        prediction_counts = {}\n\n    # \u0421\u043E\u0437\u0434\
          \u0430\u043D\u0438\u0435 \u0441\u0432\u043E\u0434\u043A\u0438\n    summary_data\
          \ = {\n        'total_samples': n_samples,\n        'prediction_distribution':\
          \ prediction_counts,\n        'timestamp': datetime.now().strftime(\"%Y-%m-%d\
          \ %H:%M:%S\")\n    }\n\n    # \u0421\u043E\u0445\u0440\u0430\u043D\u0435\
          \u043D\u0438\u0435 \u0441\u0432\u043E\u0434\u043A\u0438\n    with open(summary.path,\
          \ 'w') as f:\n        json.dump(summary_data, f)\n\n    print(f\"\u0421\u0432\
          \u043E\u0434\u043A\u0430 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\
          \u0442\u043E\u0432 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0430\
          \ \u0432 {summary.path}\")\n\n"
        image: python:3.9
pipelineInfo:
  description: "\u041F\u0430\u0439\u043F\u043B\u0430\u0439\u043D \u0434\u043B\u044F\
    \ \u0438\u043D\u0444\u0435\u0440\u0435\u043D\u0441\u0430 \u043C\u043E\u0434\u0435\
    \u043B\u0438 \u043C\u0430\u0448\u0438\u043D\u043D\u043E\u0433\u043E \u043E\u0431\
    \u0443\u0447\u0435\u043D\u0438\u044F"
  name: inference-pipeline
root:
  dag:
    tasks:
      load-inference-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-inference-data
        taskInfo:
          name: load-inference-data
      load-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-model
        taskInfo:
          name: load-model
      run-inference:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-run-inference
        dependentTasks:
        - load-inference-data
        - load-model
        inputs:
          artifacts:
            data:
              taskOutputArtifact:
                outputArtifactKey: data
                producerTask: load-inference-data
            model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: load-model
        taskInfo:
          name: run-inference
      save-results:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-save-results
        dependentTasks:
        - run-inference
        inputs:
          artifacts:
            predictions:
              taskOutputArtifact:
                outputArtifactKey: predictions
                producerTask: run-inference
        taskInfo:
          name: save-results
schemaVersion: 2.1.0
sdkVersion: kfp-2.13.0
