#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è PR3: Model Card
–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Model Card
"""

import os
import json


import os

def create_quick_model_card():
    """–®–≤–∏–¥–∫–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Model Card –±–µ–∑ –∑–∞–π–≤–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""

    print("üöÄ –®–≤–∏–¥–∫–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Model Card...")

    try:
        from model_card import ModelCard

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—ó –∫–∞—Ä—Ç–∏
        card = ModelCard("MobileNetV2 Agricultural Classifier")

        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        card.set_model_details(
            version="1.0",
            architecture="MobileNetV2 –∑ 33 –∫–ª–∞—Å–∞–º–∏ –¥–ª—è —Ö–≤–æ—Ä–æ–± —Ä–æ—Å–ª–∏–Ω",
            developers="AgriTech Team",
            license_info="MIT License"
        )

        # –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        card.set_intended_use(
            primary_use="–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ö–≤–æ—Ä–æ–± —Å—ñ–ª—å—Å—å–∫–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–∏—Ö —Ä–æ—Å–ª–∏–Ω",
            primary_users="–§–µ—Ä–º–µ—Ä–∏ —Ç–∞ –∞–≥—Ä–æ–Ω–æ–º–∏",
            limitations="–ü—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏ –ª–∏—Å—Ç—è —Ç–∞ –ø–ª–æ–¥—ñ–≤"
        )

        # –î–∞–Ω—ñ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è
        card.set_training_data(
            dataset_description="86 –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ö–≤–æ—Ä–æ–± —Ä–æ—Å–ª–∏–Ω, 33 –∫–ª–∞—Å–∏",
            data_preprocessing="–ó–º—ñ–Ω–∞ —Ä–æ–∑–º—ñ—Ä—É, –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è, –∞—É–≥–º–µ–Ω—Ç–∞—Ü—ñ—è",
            data_sources=["–í–Ω—É—Ç—Ä—ñ—à–Ω—è –±–∞–∑–∞ –¥–∞–Ω–∏—Ö"],
            data_collection_timeframe="2024",
            data_size={
                "–ó–∞–≥–∞–ª–æ–º": 86,
                "–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö": 60,
                "–í–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏—Ö": 26
            }
        )

        # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
        card.set_evaluation_data(
            dataset_description="–í–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞",
            evaluation_results={
                "F1-—Å–∫–æ—Ä": 0.827,
                "Accuracy": 0.846,
                "–ï–ø–æ—Ö –Ω–∞–≤—á–∞–Ω–Ω—è": 18
            }
        )

        # –ú–µ—Ç—Ä–∏–∫–∏
        card.add_quantitative_analysis(
            metrics={
                "F1-—Å–∫–æ—Ä": 0.827,
                "–¢–æ—á–Ω—ñ—Å—Ç—å": 0.846,
                "–ö–ª–∞—Å—ñ–≤": 33
            }
        )

        # –ï—Ç–∏–∫–∞
        card.set_ethical_considerations(
            risks_and_harms="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –≤—Ç—Ä–∞—Ç",
            use_cases_to_avoid="–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å –±–µ–∑ –µ–∫—Å–ø–µ—Ä—Ç–∞"
        )

        # –ó–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è
        card.set_caveats_recommendations(
            known_caveats="–ú–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—Ä–∏ –ø–æ–≥–∞–Ω–æ–º—É –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—ñ",
            recommendations="–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—î—é –∞–≥—Ä–æ–Ω–æ–º–∞"
        )

        # –ï–∫—Å–ø–æ—Ä—Ç
        os.makedirs("cards", exist_ok=True)

        markdown_file = "cards/quick_model_card.md"
        html_file = "cards/quick_model_card.html"
        json_file = "cards/quick_model_card.json"

        card.to_markdown(markdown_file)
        card.to_html(html_file)
        card.to_json(json_file)

        print("‚úÖ Model Card —Å—Ç–≤–æ—Ä–µ–Ω–æ:")
        print(f"  üìù {markdown_file}")
        print(f"  üåê {html_file}")
        print(f"  üìä {json_file}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–º—ñ—Å—Ç—É
        with open(markdown_file, 'r', encoding='utf-8') as f:
            content = f.read()

        if "F1-—Å–∫–æ—Ä" in content and "0.827" in content:
            print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω—ñ")
        else:
            print("‚ö†Ô∏è –ú–æ–∂–ª–∏–≤–æ, –ø—Ä–æ–±–ª–µ–º–∞ –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏")

        if len(content) > 2000:
            print("‚úÖ –î–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–µ—Ç–∞–ª–µ–π —É –∫–∞—Ä—Ç—ñ")
        else:
            print("‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ—é")

        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def create_metadata_example():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É –º–µ—Ç–∞–¥–∞–Ω–∏—Ö"""

    print("\nüìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É –º–µ—Ç–∞–¥–∞–Ω–∏—Ö...")

    metadata = {
        "model_name": "mobilenet_v2",
        "num_classes": 33,
        "class_names": [
                           "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ä–∏–æ–∑", "–§—É–∑–∞—Ä–∏–æ–∑", "–ú—É—á–Ω–∏—Å—Ç–∞ —Ä–æ—Å–∞", "–°–µ–ø—Ç–æ—Ä–∏–æ–∑",
                           "–†–∂–∞–≤—á–∏–Ω–∞", "–ê–Ω—Ç—Ä–∞–∫–Ω–æ–∑", "–§—ñ—Ç–æ—Ñ—Ç–æ—Ä–æ–∑", "–ü–µ—Ä–æ–Ω–æ—Å–ø–æ—Ä–æ–∑",
                           "–¶–µ—Ä–∫–æ—Å–ø–æ—Ä–æ–∑", "–ë–∞–∫—Ç–µ—Ä—ñ–∞–ª—å–Ω–∏–π –æ–∂–æ–≥"
                       ][:10],  # –ü–µ—Ä—à—ñ 10 –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
        "best_f1": 0.827,
        "config": {
            "batch_size": 8,
            "learning_rate": 0.001,
            "num_epochs": 18
        },
        "dataset_size": {
            "total": 86,
            "train": 60,
            "val": 26
        }
    }

    os.makedirs("models", exist_ok=True)
    metadata_file = "models/example_metadata.json"

    with open(metadata_file, 'w', encoding='utf-8') as f:
        json.dump(metadata, f, ensure_ascii=False, indent=2)

    print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {metadata_file}")
    return metadata_file


def test_with_metadata():
    """–¢–µ—Å—Ç –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –∑ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö"""

    print("\nüß™ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è...")

    try:
        from model_card import create_model_card_from_metadata

        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
        metadata_file = create_metadata_example()

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç—É –∑ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
        card_paths = create_model_card_from_metadata(metadata_file, "cards")

        if card_paths:
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
            return True
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º")
            return False

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É"""

    print("‚ö° –®–í–ò–î–ö–ò–ô –¢–ï–°–¢ PR3: MODEL CARD")
    print("=" * 40)

    success_count = 0

    # –¢–µ—Å—Ç 1: –†—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è...")
    if create_quick_model_card():
        success_count += 1

    # –¢–µ—Å—Ç 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è...")
    if test_with_metadata():
        success_count += 1

    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/2 —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if success_count == 2:
        print("üéâ –í–°–ï –ü–†–ê–¶–Æ–Ñ! PR3 –≥–æ—Ç–æ–≤–∏–π!")
        print("\nüìÅ –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏:")
        print("  cards/quick_model_card.html - –≤—ñ–¥–∫—Ä–∏–π—Ç–µ —É –±—Ä–∞—É–∑–µ—Ä—ñ")
        print("  cards/quick_model_card.md - –¥–ª—è GitHub")
        print("  models/example_metadata.json - –ø—Ä–∏–∫–ª–∞–¥ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö")
    else:
        print("‚ö†Ô∏è –Ñ –ø—Ä–æ–±–ª–µ–º–∏, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ")

    return success_count == 2


if __name__ == "__main__":
    main()