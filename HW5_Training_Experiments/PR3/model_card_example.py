#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Model Card –¥–ª—è –≤–∞—à–æ—ó –Ω–∞–≤—á–µ–Ω–æ—ó –º–æ–¥–µ–ª—ñ
–ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–≤—á–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—ó –º–æ–¥–µ–ª—ñ
"""

import os
import json
from model_card import create_model_card_from_metadata


def create_example_model_card():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Model Card –¥–ª—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–≤—á–µ–Ω–æ—ó –º–æ–¥–µ–ª—ñ"""

    print("üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Model Card –¥–ª—è –≤–∞—à–æ—ó —É—Å–ø—ñ—à–Ω–æ—ó –º–æ–¥–µ–ª—ñ")
    print("üìä F1-—Å–∫–æ—Ä: 82.7% - –≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
    metadata_files = [
        "models/simple_metadata.json",
        "models/diseases_mobilenet_v2_metadata.json",
        "../PR1/models/simple_metadata.json"
    ]

    metadata_path = None
    for path in metadata_files:
        if os.path.exists(path):
            metadata_path = path
            break

    if not metadata_path:
        print("‚ùå –§–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏–∫–ª–∞–¥...")
        metadata_path = create_example_metadata()

    print(f"üìÅ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ: {metadata_path}")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∫–∞—Ä—Ç–æ–∫
    output_dir = "cards"
    os.makedirs(output_dir, exist_ok=True)

    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ Model Card
        card_paths = create_model_card_from_metadata(metadata_path, output_dir)

        print(f"\nüéâ Model Card —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        print(f"üìù Markdown: {card_paths['markdown']}")
        print(f"üåê HTML: {card_paths['html']}")
        print(f"üìä JSON: {card_paths['json']}")

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        print(f"1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ HTML —Ñ–∞–π–ª —É –±—Ä–∞—É–∑–µ—Ä—ñ –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É")
        print(f"2. –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è Markdown –≤–µ—Ä—Å—ñ—î—é –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó")
        print(f"3. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ JSON –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏")

        return card_paths

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ Model Card: {e}")
        return None


def create_example_metadata():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É –º–µ—Ç–∞–¥–∞–Ω–∏—Ö, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"""

    print("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É –º–µ—Ç–∞–¥–∞–Ω–∏—Ö...")

    example_metadata = {
        "model_name": "mobilenet_v2",
        "num_classes": 33,
        "class_names": [
            "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ä–∏–æ–∑ –∑–µ—Ä–Ω–∞", "–ë—É—Ä–∞—è —Ä–∂–∞–≤—á–∏–Ω–∞", "–ì–µ–ª—å–º–∏–Ω—Ç–æ—Å–ø–æ—Ä–∏–æ–∑–Ω–∞—è –∫–æ—Ä–Ω–µ–≤–∞—è –≥–Ω–∏–ª—å",
            "–ú—É—á–Ω–∏—Å—Ç–∞—è —Ä–æ—Å–∞", "–ü–∏—Ä–µ–Ω–æ—Ñ–æ—Ä–æ–∑", "–°–µ–ø—Ç–æ—Ä–∏–æ–∑", "–§—É–∑–∞—Ä–∏–æ–∑", "–ê–Ω—Ç—Ä–∞–∫–Ω–æ–∑ —Å–æ–∏",
            "–ë–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –æ–∂–æ–≥", "–ü–µ—Ä–æ–Ω–æ—Å–ø–æ—Ä–æ–∑", "–ö–æ—Ä–Ω–µ–µ–¥ —Å–≤–µ–∫–ª—ã", "–¶–µ—Ä–∫–æ—Å–ø–æ—Ä–æ–∑",
            "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ä–∏–æ–∑ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫–∞", "–ë–µ–ª–∞—è –≥–Ω–∏–ª—å –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫–∞", "–†–∂–∞–≤—á–∏–Ω–∞ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫–∞",
            "–ê–Ω—Ç—Ä–∞–∫–Ω–æ–∑ –≥–æ—Ä–æ—Ö–∞", "–ê—Å–∫–æ—Ö–∏—Ç–æ–∑ –≥–æ—Ä–æ—Ö–∞", "–ú—É—á–Ω–∏—Å—Ç–∞—è —Ä–æ—Å–∞ –≥–æ—Ä–æ—Ö–∞", "–†–∂–∞–≤—á–∏–Ω–∞ –≥–æ—Ä–æ—Ö–∞",
            "–ê–Ω—Ç—Ä–∞–∫–Ω–æ–∑ –ª—å–Ω–∞", "–ú—É—á–Ω–∏—Å—Ç–∞—è —Ä–æ—Å–∞ –ª—å–Ω–∞", "–ü–∞—Å–º–æ –ª—å–Ω–∞", "–†–∂–∞–≤—á–∏–Ω–∞ –ª—å–Ω–∞",
            "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ä–∏–æ–∑ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è", "–û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–∞—Ä—à–∞", "–†–∏–∑–æ–∫—Ç–æ–Ω–∏–æ–∑ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è",
            "–§–∏—Ç–æ—Ñ—Ç–æ—Ä–æ–∑", "–ß–µ—Ä–Ω–∞—è –Ω–æ–∂–∫–∞", "–ö–æ–ª—å—Ü–µ–≤–∞—è –≥–Ω–∏–ª—å", "–°–µ—Ä–µ–±—Ä–∏—Å—Ç–∞—è –ø–∞—Ä—à–∞",
            "–°—É—Ö–∞—è —Ñ—É–∑–∞—Ä–∏–æ–∑–Ω–∞—è –≥–Ω–∏–ª—å", "–§–æ–º–æ–∑ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è", "–†–∞–∫ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è"
        ],
        "risk_type": "diseases",
        "best_f1": 0.827,
        "best_val_f1": 0.827,
        "config": {
            "model_name": "mobilenet_v2",
            "num_epochs": 18,
            "batch_size": 8,
            "learning_rate": 0.001,
            "weight_decay": 0.0001,
            "dropout": 0.3,
            "validation_split": 0.25
        },
        "dataset_size": {
            "total": 86,
            "train": 60,
            "val": 26
        }
    }

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É
    os.makedirs("models", exist_ok=True)
    metadata_path = "models/example_metadata.json"

    with open(metadata_path, 'w', encoding='utf-8') as f:
        json.dump(example_metadata, f, ensure_ascii=False, indent=2)

    print(f"‚úÖ –ü—Ä–∏–∫–ª–∞–¥ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–æ: {metadata_path}")
    return metadata_path


def demonstrate_manual_creation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä—É—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Model Card"""

    print("\nüõ†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä—É—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Model Card...")

    from model_card import ModelCard
    import numpy as np

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ä—Ç–∏
    card = ModelCard("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∞ –º–æ–¥–µ–ª—å –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ö–≤–æ—Ä–æ–± —Ä–æ—Å–ª–∏–Ω")

    # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    card.set_model_details(
        version="1.0",
        architecture="MobileNetV2 –∑ 33 –∫–ª–∞—Å–∞–º–∏ –≤–∏—Ö–æ–¥—É –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ö–≤–æ—Ä–æ–± —Ä–æ—Å–ª–∏–Ω",
        developers="–ö–æ–º–∞–Ω–¥–∞ —Ä–æ–∑—Ä–æ–±–∫–∏ –®–Ü –¥–ª—è —Å—ñ–ª—å—Å—å–∫–æ–≥–æ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–∞",
        license_info="MIT License",
        citation="Demo Agricultural Disease Classification Model v1.0",
        contact_info="demo@agritech.example.com"
    )

    card.set_intended_use(
        primary_use="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ö–≤–æ—Ä–æ–± —Å—ñ–ª—å—Å—å–∫–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–∏—Ö –∫—É–ª—å—Ç—É—Ä –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è—Ö –ª–∏—Å—Ç—è —Ç–∞ –ø–ª–æ–¥—ñ–≤",
        primary_users="–§–µ—Ä–º–µ—Ä–∏, –∞–≥—Ä–æ–Ω–æ–º–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∏ –∑ —Å—ñ–ª—å—Å—å–∫–æ–≥–æ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–∞, –¥–æ—Å–ª—ñ–¥–Ω–∏–∫–∏",
        out_of_scope_uses=[
            "–ú–µ–¥–∏—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª—é–¥–µ–π –∞–±–æ –¥–æ–º–∞—à–Ω—ñ—Ö —Ç–≤–∞—Ä–∏–Ω",
            "–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è",
            "–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ä–æ—Å–ª–∏–Ω"
        ],
        limitations="–ú–æ–¥–µ–ª—å –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–∏—Ö —Å—ñ–ª—å—Å—å–∫–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–∏—Ö –∫—É–ª—å—Ç—É—Ä —Ç–∞ –º–æ–∂–µ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ —Ö–≤–æ—Ä–æ–±–∏"
    )


    card.set_training_data(
        dataset_description="–ö–æ–ª–µ–∫—Ü—ñ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —Ö–≤–æ—Ä–∏—Ö —Ä–æ—Å–ª–∏–Ω –∑ 33 –∫–ª–∞—Å–∞–º–∏ –ø–æ—à–∏—Ä–µ–Ω–∏—Ö —Å—ñ–ª—å—Å—å–∫–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–∏—Ö —Ö–≤–æ—Ä–æ–±",
        data_preprocessing="–ó–º—ñ–Ω–∞ —Ä–æ–∑–º—ñ—Ä—É –¥–æ 224x224 –ø—ñ–∫—Å–µ–ª—ñ–≤, –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è, –∞—É–≥–º–µ–Ω—Ç–∞—Ü—ñ—è (–ø–æ–≤–æ—Ä–æ—Ç, –≤—ñ–¥–∑–µ—Ä–∫–∞–ª–µ–Ω–Ω—è, –∑–º—ñ–Ω–∞ —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ)",
        data_sources=["–í–Ω—É—Ç—Ä—ñ—à–Ω—è –±–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π", "–í—ñ–¥–∫—Ä–∏—Ç—ñ –∞–≥—Ä–æ–Ω–æ–º—ñ—á–Ω—ñ –¥–∞—Ç–∞—Å–µ—Ç–∏"],
        data_collection_timeframe="2024",
        data_size={
            "–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å": 86,
            "–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞": 60,
            "–í–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞": 26,
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—ñ–≤": 33
        }
    )
    card.set_evaluation_data(
        dataset_description="–°—Ç—Ä–∞—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞ (25% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É)",
        evaluation_factors=["F1-—Å–∫–æ—Ä", "–¢–æ—á–Ω—ñ—Å—Ç—å –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó", "–ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ—Å—Ç—å –∫–ª–∞—Å—ñ–≤"],
        evaluation_results={
            "F1-—Å–∫–æ—Ä (weighted)": 0.827,
            "Accuracy": 0.846,
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ø–æ—Ö –Ω–∞–≤—á–∞–Ω–Ω—è": 18,
            "Early stopping": "–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –ø—ñ—Å–ª—è –ø–ª–∞—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
        }
    )

    card.add_quantitative_analysis(
        metrics={
            "F1-—Å–∫–æ—Ä": 0.827,
            "Precision (macro)": 0.831,
            "Recall (macro)": 0.823,
            "Accuracy": 0.846,
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤": "~3.5M"
        },
        performance_measures={
            "–ß–∞—Å —ñ–Ω—Ñ–µ—Ä–µ–Ω—Å—É (CPU)": "< 100–º—Å –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
            "–†–æ–∑–º—ñ—Ä –º–æ–¥–µ–ª—ñ": "~14MB",
            "–°–ø–æ–∂–∏–≤–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ": "< 200MB",
            "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏": "JPEG, PNG"
        }
    )

    card.set_ethical_considerations(
        risks_and_harms="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω, –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏—Ö –≤—Ç—Ä–∞—Ç —Ñ–µ—Ä–º–µ—Ä—ñ–≤ –∞–±–æ –Ω–∞–¥–º—ñ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–µ—Å—Ç–∏—Ü–∏–¥—ñ–≤",
        use_cases_to_avoid="–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ —î–¥–∏–Ω–∏–π –º–µ—Ç–æ–¥ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏—Ö –∫—É–ª—å—Ç—É—Ä –±–µ–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –∑ –µ–∫—Å–ø–µ—Ä—Ç–æ–º-–∞–≥—Ä–æ–Ω–æ–º–æ–º",
        fairness_considerations="–ú–æ–¥–µ–ª—å –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à —Ç–æ—á–Ω–æ—é –¥–ª—è —Ä—ñ–¥–∫—ñ—Å–Ω–∏—Ö —Å–æ—Ä—Ç—ñ–≤ —Ä–æ—Å–ª–∏–Ω –∞–±–æ –Ω–µ–∑–≤–∏—á–∞–π–Ω–∏—Ö —É–º–æ–≤ –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è, —â–æ –Ω–µ –±—É–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ –≤ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö",
        privacy_considerations="–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ä–æ—Å–ª–∏–Ω –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ –ø—Ä–æ –ª–æ–∫–∞—Ü—ñ—é —Ñ–µ—Ä–º–∏ —Ç–∞ —á–∞—Å –∑–±–æ—Ä—É –≤—Ä–æ–∂–∞—é"
    )

    card.set_caveats_recommendations(
        known_caveats="–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –º–æ–∂–µ –∑–Ω–∏–∂—É–≤–∞—Ç–∏—Å—è –ø—Ä–∏ –ø–æ–≥–∞–Ω–æ–º—É –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—ñ, —Ä–æ–∑–º–∏—Ç–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è—Ö –∞–±–æ –Ω–µ—Ç–∏–ø–æ–≤–∏—Ö —Ä–∞–∫—É—Ä—Å–∞—Ö –∑–π–æ–º–∫–∏",
        recommendations="–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –ø–æ—î–¥–Ω–∞–Ω–Ω—ñ –∑ –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ—é –æ—Ü—ñ–Ω–∫–æ—é –∞–≥—Ä–æ–Ω–æ–º–∞, —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–Ω–∞–ª–∞—à—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö"
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    # –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∫–ª–∞—Å—ñ–≤
    class_names_demo = [
        "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ä–∏–æ–∑", "–§—É–∑–∞—Ä–∏–æ–∑", "–ú—É—á–Ω–∏—Å—Ç–∞ —Ä–æ—Å–∞", "–°–µ–ø—Ç–æ—Ä–∏–æ–∑", "–†–∂–∞–≤—á–∏–Ω–∞",
        "–ê–Ω—Ç—Ä–∞–∫–Ω–æ–∑", "–§—ñ—Ç–æ—Ñ—Ç–æ—Ä–æ–∑", "–ü–µ—Ä–æ–Ω–æ—Å–ø–æ—Ä–æ–∑", "–¶–µ—Ä–∫–æ—Å–ø–æ—Ä–æ–∑", "–ë–∞–∫—Ç–µ—Ä—ñ–∞–ª—å–Ω–∏–π –æ–∂–æ–≥"
    ]
    class_counts_demo = {name: np.random.randint(5, 15) for name in class_names_demo}
    card.generate_class_distribution_plot(class_counts_demo, "–†–æ–∑–ø–æ–¥—ñ–ª –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤ —Ö–≤–æ—Ä–æ–±")

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—É –º–µ—Ç—Ä–∏–∫
    metrics_demo = {
        "F1-—Å–∫–æ—Ä": 0.827,
        "Precision": 0.831,
        "Recall": 0.823,
        "Accuracy": 0.846
    }
    card.generate_performance_metrics_plot(metrics_demo)

    # –ï–∫—Å–ø–æ—Ä—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ—ó –∫–∞—Ä—Ç–∏
    os.makedirs("cards", exist_ok=True)

    demo_markdown = "cards/demo_model_card.md"
    demo_html = "cards/demo_model_card.html"

    card.to_markdown(demo_markdown)
    card.to_html(demo_html)

    print(f"‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∞ Model Card —Å—Ç–≤–æ—Ä–µ–Ω–∞:")
    print(f"  üìù Markdown: {demo_markdown}")
    print(f"  üåê HTML: {demo_html}")

    return {"markdown": demo_markdown, "html": demo_html}


def validate_model_card_content(card_path):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ—Å—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–æ—ó Model Card"""

    print(f"\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ—Å—Ç—É Model Card: {card_path}")

    try:
        with open(card_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å–µ–∫—Ü—ñ–π
        required_sections = [
            "–î–µ—Ç–∞–ª—ñ –º–æ–¥–µ–ª—ñ",
            "–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è",
            "–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ",
            "–û—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª—ñ",
            "–ö—ñ–ª—å–∫—ñ—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑",
            "–ï—Ç–∏—á–Ω—ñ –º—ñ—Ä–∫—É–≤–∞–Ω–Ω—è",
            "–ó–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"
        ]

        missing_sections = []
        for section in required_sections:
            if section not in content:
                missing_sections.append(section)

        if missing_sections:
            print(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ —Å–µ–∫—Ü—ñ—ó: {', '.join(missing_sections)}")
        else:
            print("‚úÖ –í—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —Å–µ–∫—Ü—ñ—ó –ø—Ä–∏—Å—É—Ç–Ω—ñ")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –º–µ—Ç—Ä–∏–∫
        metrics_keywords = ["F1", "—Ç–æ—á–Ω—ñ—Å—Ç—å", "Accuracy", "0.827"]
        found_metrics = sum(1 for keyword in metrics_keywords if keyword in content)

        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ –º–µ—Ç—Ä–∏–∫: {found_metrics}/{len(metrics_keywords)}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
        content_length = len(content)
        print(f"üìÑ –†–æ–∑–º—ñ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {content_length} —Å–∏–º–≤–æ–ª—ñ–≤")

        if content_length > 5000:
            print("‚úÖ –î–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å")
        else:
            print("‚ö†Ô∏è –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π")

        return len(missing_sections) == 0

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""

    print("üé® PR3: –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø MODEL CARD –ì–ï–ù–ï–†–ê–¢–û–†–ê")
    print("=" * 60)

    # 1. –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ —Ä–µ–∞–ª—å–Ω–∏—Ö –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
    print("\n1Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Model Card –∑ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –º–æ–¥–µ–ª—ñ...")
    card_paths = create_example_model_card()

    # 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä—É—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    print("\n2Ô∏è‚É£ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä—É—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è...")
    demo_paths = demonstrate_manual_creation()

    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫
    if card_paths:
        print("\n3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫...")
        validate_model_card_content(card_paths['markdown'])

    # 4. –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print("\nüìã –ü–Ü–î–°–£–ú–û–ö:")
    print("‚úÖ Model Card –º–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    print("‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ñ–æ—Ä–º–∞—Ç—ñ–≤: Markdown, HTML, JSON")
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö")
    print("‚úÖ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ—Ç—Ä–∏–∫ —Ç–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –¥–∞–Ω–∏—Ö")
    print("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º Google Model Cards")

    print("\nüéØ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
    print("1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ HTML —Ñ–∞–π–ª —É –±—Ä–∞—É–∑–µ—Ä—ñ")
    print("2. –î–æ–¥–∞–π—Ç–µ Markdown –≤–µ—Ä—Å—ñ—é –¥–æ –≤–∞—à–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é")
    print("3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ JSON –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó")
    print("4. –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–∞—Ä—Ç–æ—é –∑ –∫–æ–º–∞–Ω–¥–æ—é —Ç–∞ —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–∞–º–∏")

    print("\nüöÄ –í–ê–® PR3 –ì–û–¢–û–í–ò–ô –î–õ–Ø –ó–î–ê–ß–Ü!")


if __name__ == "__main__":
    main()